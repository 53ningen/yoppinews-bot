AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  yoppinews-bot

Globals:
  Function:
    Timeout: 5
    Handler: app.lambda_handler
    Runtime: python3.7
    MemorySize: 128
    Environment:
      Variables:
        Stage: !Sub ${Stage}
        ConfigBucket: !Sub ${ConfigBucket}
        ConfigKeyName: !Sub ${ConfigKeyName}

Parameters:
  Stage:
    Type: String
  LogRetentionInDays:
    Type: Number
    Default: 7
  TwitterAccessTokenKey:
    Type: String
  TwitterAccessTokenSecret:
    Type: String
  TwitterConsumerKey:
    Type: String
  TwitterConsumerSecret:
    Type: String
  ConfigBucket:
    Type: String
  ConfigKeyName:
    Type: String

Mappings:
  StageMap:
    prod:
      DefaultReadCapacityUnits: 3
      DefaultWriteCapacityUnits: 3
    dev:
      DefaultReadCapacityUnits: 1
      DefaultWriteCapacityUnits: 1

Resources:
  # 共有コンポーネント
  DeadLetterQueue:
    Type: AWS::SQS::Queue

  PipModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: yoppinews-bot pip modules(python 3.x)
      ContentUri: src/layers/pip_modules
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - python3.6
        - python3.7
  SharedFilesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: yoppinews-bot shared files
      ContentUri: src/layers/shared_files
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - python3.6
        - python3.7


  # ツイート収集コンポーネント
  CollectTweetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 120
      CodeUri: src/collect_tweets/
      Handler: app.lambda_handler
      Layers:
        - !Ref PipModulesLayer
        - !Ref SharedFilesLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CollectTweetsDynamoDBTable
        - S3ReadPolicy:
            BucketName: !Sub ${ConfigBucket}
        - SNSPublishMessagePolicy:
            TopicName:
              !Select
                - 5
                - !Split
                  - ":"
                  - !Ref CollectTweetsTopic
      Environment:
        Variables:
          TwitterAccessTokenKey: !Sub ${TwitterAccessTokenKey}
          TwitterAccessTokenSecret: !Sub ${TwitterAccessTokenSecret}
          TwitterConsumerKey: !Sub ${TwitterConsumerKey}
          TwitterConsumerSecret: !Sub ${TwitterConsumerSecret}
          TargetTopic: !Ref CollectTweetsTopic
          DDBCacheTable: !Ref CollectTweetsDynamoDBTable
      Events:
        CollectTweetsEvent:
          Type: Schedule
          Properties:
             Schedule: 'rate(1 minute)'
  CollectTweetsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join
          - ''
          - - '/aws/lambda/'
            - !Ref CollectTweetsFunction
      RetentionInDays: !Sub ${LogRetentionInDays}

  CollectTweetsTopic:
    Type: AWS::SNS::Topic
  CollectTweetsTopicQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CollectTweetsQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      TopicArn: !Ref CollectTweetsTopic

  CollectTweetsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 2
  CollectTweetsTopicQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref CollectTweetsQueue
        PolicyDocument:
          Statement:
            Sid: CollectTweetsTopicQueuePolicy
            Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt CollectTweetsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref CollectTweetsTopic

  CollectTweetsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !FindInMap [ StageMap, !Ref Stage, DefaultReadCapacityUnits ]
        WriteCapacityUnits: !FindInMap [ StageMap, !Ref Stage, DefaultWriteCapacityUnits ]
      AttributeDefinitions:
        - AttributeName: original_id
          AttributeType: N
      KeySchema:
        - AttributeName: original_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true


  # リツイートコンポーネント
  RetweetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 120
      CodeUri: src/retweet/
      Handler: app.lambda_handler
      Layers:
        - !Ref PipModulesLayer
        - !Ref SharedFilesLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${ConfigBucket}
        - SNSPublishMessagePolicy:
            TopicName:
              !Select
                - 5
                - !Split
                  - ":"
                  - !Ref RetweetTopic
      Environment:
        Variables:
          TwitterAccessTokenKey: !Sub ${TwitterAccessTokenKey}
          TwitterAccessTokenSecret: !Sub ${TwitterAccessTokenSecret}
          TwitterConsumerKey: !Sub ${TwitterConsumerKey}
          TwitterConsumerSecret: !Sub ${TwitterConsumerSecret}
  RetweetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join
          - ''
          - - '/aws/lambda/'
            - !Ref RetweetFunction
      RetentionInDays: !Sub ${LogRetentionInDays}

  RetweetTopic:
    Type: AWS::SNS::Topic
  RetweetTopicFunctionSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt RetweetFunction.Arn
      Protocol: lambda
      TopicArn: !Ref RetweetTopic
  RetweetTopicFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt RetweetFunction.Arn
        Principal: sns.amazonaws.com
        SourceArn: !Ref RetweetTopic


  # ツイートコンポーネント
  TweetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 120
      CodeUri: src/tweet/
      Handler: app.lambda_handler
      Layers:
        - !Ref PipModulesLayer
        - !Ref SharedFilesLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${ConfigBucket}
        - SNSPublishMessagePolicy:
            TopicName:
              !Select
                - 5
                - !Split
                  - ":"
                  - !Ref TweetTopic
      Environment:
        Variables:
          TwitterAccessTokenKey: !Sub ${TwitterAccessTokenKey}
          TwitterAccessTokenSecret: !Sub ${TwitterAccessTokenSecret}
          TwitterConsumerKey: !Sub ${TwitterConsumerKey}
          TwitterConsumerSecret: !Sub ${TwitterConsumerSecret}
  TweetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join
          - ''
          - - '/aws/lambda/'
            - !Ref TweetFunction
      RetentionInDays: !Sub ${LogRetentionInDays}

  TweetTopic:
    Type: AWS::SNS::Topic
  TweetTopicFunctionSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt TweetFunction.Arn
      Protocol: lambda
      TopicArn: !Ref TweetTopic
  TweetTopicFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt TweetFunction.Arn
        Principal: sns.amazonaws.com
        SourceArn: !Ref TweetTopic
